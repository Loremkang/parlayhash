./boost_hash,0%update,n=10000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=21,mops=367
./boost_hash,0%update,n=10000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=21,mops=369
./boost_hash,0%update,n=10000000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=31,mops=855
./boost_hash,0%update,n=10000000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=31,mops=859

./boost_hash,10%update,n=10000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=21,mops=179
./boost_hash,10%update,n=10000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=21,mops=179
./boost_hash,10%update,n=10000000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=31,mops=272
./boost_hash,10%update,n=10000000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=31,mops=272

./boost_hash,50%update,n=10000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=21,mops=49
./boost_hash,50%update,n=10000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=21,mops=49
./boost_hash,50%update,n=10000000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=31,mops=67
./boost_hash,50%update,n=10000000,p=128,long_long,z=0,grow=0,mem_pe=27,insert_mops=31,mops=67

./boost_hash,0%update,n=10000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=21,mops=23
./boost_hash,0%update,n=10000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=21,mops=24
./boost_hash,0%update,n=10000000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=31,mops=73
./boost_hash,0%update,n=10000000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=31,mops=59

./boost_hash,10%update,n=10000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=21,mops=24
./boost_hash,10%update,n=10000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=20,mops=25
./boost_hash,10%update,n=10000000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=31,mops=36
./boost_hash,10%update,n=10000000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=31,mops=34

./boost_hash,50%update,n=10000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=21,mops=7
./boost_hash,50%update,n=10000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=21,mops=7
./boost_hash,50%update,n=10000000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=31,mops=6
./boost_hash,50%update,n=10000000,p=128,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=31,mops=7

./boost_hash,10%update,n=10000,p=128,int,z=0,grow=0,mem_pe=17,insert_mops=21,mops=178
./boost_hash,10%update,n=10000,p=128,int,z=0,grow=0,mem_pe=17,insert_mops=21,mops=179
./boost_hash,10%update,n=10000000,p=128,int,z=0,grow=0,mem_pe=17,insert_mops=31,mops=285
./boost_hash,10%update,n=10000000,p=128,int,z=0,grow=0,mem_pe=17,insert_mops=31,mops=285

./boost_hash,0%update,n=1229916,p=128,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=24,mops=35
./boost_hash,0%update,n=1229916,p=128,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=24,mops=43
./boost_hash,10%update,n=1229916,p=128,string_4xlong,trigram,grow=0,mem_pe=110,insert_mops=25,mops=35
./boost_hash,10%update,n=1229916,p=128,string_4xlong,trigram,grow=0,mem_pe=110,insert_mops=25,mops=30
./boost_hash,50%update,n=1229916,p=128,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=25,mops=7
./boost_hash,50%update,n=1229916,p=128,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=26,mops=5
initial insert geometric mean of mops = 27.6288
benchmark geometric mean of mops = 59.7142
bytes/element geometric mean = 37.88
