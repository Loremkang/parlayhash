#include <atomic>
#include <vector>

static constexpr int max_thread_ids = 1024;

struct thread_ids {
  std::vector<std::atomic<bool>> id_slots;
  std::atomic<int> max_used ;
  int add_id() {
    int i;
    bool old;
    do {
      old = false;
      for (i=0; (i < max_thread_ids) && id_slots[i]; i++);
      assert(i < max_thread_ids);
    } while (!id_slots[i].compare_exchange_strong(old, true));
    int maxu = max_used.load();
    while (i > maxu && max_used.compare_exchange_strong(maxu, i));
    //std::cout << "adding: " << i << std::endl;
    return i;
  }
  void remove_worker(int i) {
    //std::cout << "removing: " << i << std::endl;
    id_slots[i] = false; }
  
  thread_ids() :
    id_slots(std::vector<std::atomic<bool>>(max_thread_ids)),
    max_used(0) {
    std::fill(id_slots.begin(), id_slots.end(), false); 
  }
};
